Possible solutions:

(a) The conditions amount to saying that the string must end with at
least one b.  We can capture this by the RE:

  (a|b)*bb*

or, more compactly:

  [ab]*b+ 

If we wanted to allow the empty string as well, we could simply write

  ([ab]*b+)?

(b) Assuming consecutive underscores within a number are allowed:

  0[xX][0-9a-fA-F](_*[0-9a-fA-F])*

If we wanted to disallow consecutive underscores, we could write:

  0[xX][0-9a-fA-F](_?[0-9a-fA-F])*

(c) Let's write down some more examples of strings in this language to
see if we can spot a pattern:

     0   4   8  12  16
    20  24  28  32  36
    40  44  48  52  56
    60  64  68  72  76
    80  84  88  92  96
    ...

It is immediately clear that the single digit numbers in this list can
be described by the following regular expression:

    r1 = (0|4|8)

For the two digit numbers, we can notice that, if the first digit is
even (2|4|6|8), then last digit can be any of (0|4|8) and if the first
digit is odd (1|3|5|7|9), then the last digit can be any of (4|6).
Thus a suitable regular expression for all of the two digit numbers
is:

    r2 = (2|4|6|8)(0|4|8) | (1|3|5|7|9)(2|6)
         \______________/   \______________/

Finally, any number with three or more digits that is also a multiple
of four must end with a pair of two digits that is a multiple of four,
but the digits that come before that can be anything because they are
all implicitly multiplied by 100, which is a multiple of four.  Thus a
suitable regular expression for all multiples with 3 or more digits
is:

    r3 = [1-9]    [0-9]*    ((0|2|4|6|8)(0|4|8) | (1|3|5|7|9)(2|6))
         \___/              \_____________________________________/
        Nonzero   other       last two digits are a multiple of 4
        leading   digits
         digit

Any natural number that is a multiple of four must have one, two, or
more digits, so it will match one of the three regular expressions
above, and hence the set of all strings representing multiples of 4
can be described by a regular expression of the form (r1|r2|r3). (If
testing this on Regex, it is important to remove all internal spaces
in the regular expression first.)


